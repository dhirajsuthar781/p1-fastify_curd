import { User } from "../db.js";

// validation of body
const createUserSchema = {

     schema: {
          body: {
               type: 'object',
               required: ['name', 'password'],
               properties: {
                    name: { type: 'string' },
                    password: { type: 'string' }
               }
          }
     }
}

/// i can also validate query params , and response of api etc (soo cool)
/// schema only validation of body , it can't filter any filed in body.
// we can also take or validate req.body data




async function UserRouter(fastify, opts) {




     fastify.get('/api/test', function (request, reply) {
          return { data: 'this is from test rotue' }
     })


     fastify.get('/api/user', async function (request, reply) {

          let { q } = request.query;

          let MainQuery = {};

          if (q) {
               MainQuery = {
                    $or: [
                         { name: { $regex: q, $options: 'i' } },
                         { password: { $regex: q, $options: 'i' } },
                    ]
               }
          }

          let data = await User.find(MainQuery);

          reply.code(200);

          return { status: true, data }
     })



     fastify.get('/api/user/:id', async function (request, reply) {

          let { id } = request.params;


          const user = await User.findOne({ _id: id });
          if (!user) return reply.status(404).send({ error: "User not found" });


          reply.code(200);

          return { status: true, data: user }
     })



     fastify.post('/api/user', createUserSchema, async function (request, reply) {

          const { name, password } = request.body

          let result = await User.create(request.body)

          console.log("New user inserted with id: ", result.insertedId);

          reply.code(200);

          return { status: true, data: result }
     })


     fastify.get('/testing', async function (request, reply) {

          let testingIII = [];

          for (let i = 0; i < 1000; i++) {
               testingIII.push(i);
          }

          let results = await Promise.all(
               testingIII.map((i) =>
                    User.create({ name: "autoGenerated " + i, password: "testing" })
               )
          );

          console.log(results);  // Log the results

          reply.send({ status: 'success', data: results });

     })
}


export default UserRouter